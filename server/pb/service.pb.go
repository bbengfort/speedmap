// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KV service

type KVClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ClientReply, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*ClientReply, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*ClientReply, error)
}

type kVClient struct {
	cc *grpc.ClientConn
}

func NewKVClient(cc *grpc.ClientConn) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := grpc.Invoke(ctx, "/pb.KV/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := grpc.Invoke(ctx, "/pb.KV/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := grpc.Invoke(ctx, "/pb.KV/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KV service

type KVServer interface {
	Get(context.Context, *GetRequest) (*ClientReply, error)
	Put(context.Context, *PutRequest) (*ClientReply, error)
	Del(context.Context, *DelRequest) (*ClientReply, error)
}

func RegisterKVServer(s *grpc.Server, srv KVServer) {
	s.RegisterService(&_KV_serviceDesc, srv)
}

func _KV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KV/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KV_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KV_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _KV_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x81, 0x88, 0x18, 0x35, 0x31, 0x72, 0x31, 0x79, 0x87, 0x09, 0x69,
	0x70, 0x31, 0xbb, 0xa7, 0x96, 0x08, 0xf1, 0xe9, 0x15, 0x24, 0xe9, 0xb9, 0xa7, 0x96, 0x04, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0xf1, 0x83, 0xf8, 0xce, 0x60, 0xf5, 0x41, 0xa9, 0x05, 0x39,
	0x95, 0x4a, 0x0c, 0x20, 0x95, 0x01, 0xa5, 0x50, 0x95, 0x01, 0xa5, 0x04, 0x54, 0xba, 0xa4, 0xe6,
	0x40, 0x54, 0xba, 0xa4, 0xe6, 0xe0, 0x56, 0x99, 0xc4, 0x06, 0x76, 0x8b, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0x89, 0xae, 0xef, 0xae, 0x00, 0x00, 0x00,
}
